Configuring git for the first time:
  Set name of user. This name will be used for identifying  user who is making changes. This is global user but specific users can be configured inside projects.
    -git config --global user.name "Ivan Drmic"
  Set email for global user:
    -git config --global user.email johndoe@example.com
  Set editor that will be used by git to prompt user to enter text:
    For Linux:
      -git config --global core.editor emacs
    Windows needs full path:
      -git config --global core.editor "C:/Users/Ivan/AppData/Local/atom/atom.exe"
  List general/global setting from git:
    -git config --list
  List specific parameter:
    -git config NAME_PARAMETER

Help pages:
  These help pages are offline:
    -git help TERM

Clone already existing repository:
  This command receives full copy of all data from server. Every version of every file in history of project.
  It also initializes .git directory and set data to latest version.
  DIRECTORY_NAME is optional.
    -git clone https://URL DIRECTORY_NAME

Initializing a Repository in Directory:
  -git init

Checking on state of files:
  -git status
    We can see what files are modified and what files are untracked. We can also see what changes will be committed.
  -git status -s
    For short output:
      -M: for Modified
      -A: for new file added to staging area
      -??: for files that are not tracked
      -left column is for status in staging area
      -right column is for status in working directory

To begin tracking file use command:
  -git add NAME
    With this we can begin tracking of single file.

To add current modified file to stage state also use command:
  -git add NAME

To see more specific difference between old files and newly changed files use command:
  -git diff
    It list what have been changed but not yet staged. It compares what is in working directory with what is in staged area.
  -git diff --staged
    With this parameter we can see what has been staged but not committed.
    This command show exact lines which were changed.

To commit changes from staging area:
  -git commit
    It opens editor in which is listed what will be committed. In other words it show short output of command "git status".
    We can write our own comment on what changes are.
    After leaving the editor git creates commit message with out comments.
  -git commit -v
    It additionally puts output from command "git diff" in the editor.
  -git commit -m "My message"
    This ways we commit message can be written directly in command.
  -git commit -a -m "My first commit messages."
    With parameter "a" staging area can be skipped. Git will automatically stage all file that were tracked before.
  -git commit --amend
    Can modify commit message or add some changes to last commit. It overwrites previous commit.

To remove file, it needs to be removed from staging area (from tracked files) with command:
  It supports regular expressions in file names but special character need to be escaped "\" like character "*".
  -git rm NAME
    It removes it from working directory as well.
  -git rm -f NAME
    To force removal if file has already changed and added to staging area.
  -git rm --cached NAME
    If user wants to remove file from staging area but now from working directory.

To rename file and still keep it tracked as with original name:
  -git mv NAME NEW_NAME

Listing history of project, previous commits:
  -git log
    Check help pages for attributes.
      Attribute "-p" show difference in each commit.
      With numerical attribute user can limit number of listed commits, for example "-2" for last 2 commits.
      For short stats about commit (for example number of modified files):
        -git log --stat
      For changing format of output use:
        -git --pretty=[online, full, short, fuller, format(custom made output)]
      For "graphic" show of commits and merge use attribute "--graph".
      To search through commit history for string use:
        -git log -S STRING
      Branching:
        git log --oneline --decorate --graph --all

To remove file from staging area (for example if user wants to exclude some file file):
  -git reset HEAD FILE_NAME
    File changes are not lost but only removed from staging area (won't be in next commit.)

Reverting file to the version from last commit (throwing all changes since then) can be made with command:
  -git checkout -- FILE_NAME
    Can be dangerous to use because file is copied over and changes are lost.

For viewing remote repositories:
  -git remote
    Add "-v" to se URL from which repositories was cloned.
  -git remote add NAME URL
    For adding new remote repository.
  -git remote show REMOTE_NAME
    Additional Information about remote repository.

User can fetch new data from remote repository with:
  -git fetch NAME
    It doesn't merge new data with your own data.


For fetching and merging data from remote repository to current branch user can use:
  -git pull NAME

If user wants to send his changes to server he can use:
  -git push REMOTE_NAME BRANCh_NAME
    To push all tags:
      git push origin --tags

For listing tags:
  git tag
    For search argument "l" can be used.
      git tag -l "NAME"
    Creating annotated tag:
      git tag -a v1.4 -m "version 1.4"
        Can also be used with checksum of previous commits.
        To see tag:
          git show v1.4
    Creating lightweight tag:
      git tag v1.4-lw
    If user wants to view files in tag he can use "checkout" argument:
      git checkout 1.4

Branch:
  List branches:
    git branch
  Create new branch:
    git branch NAME
  To switch to branch:
      git checkout NAME
  To create and switch branch:
    git checkout -b "NAME"
  To delete branch:
    git branch -d NAME
