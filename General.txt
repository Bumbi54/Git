Git is working on similar concept as file system. It takes picture of what files look like and save the reference to this snapshot. If files are not changed git doesn't store those file instead it saves
reference to the previous identical file.
  -data as stream of snapshots

Almost all can be done locally and user don't need to contact the remote server to se history of changes.

Git is doing check-sum for keeping integrity of files.
  -hashing algorithm SHA-1
  -every thing is stored in databases by hash and not by file names

Files have three main states they can be in:
  Committed
    Data is stored in local database
  Modified
    Data has been changed but it still hasn't been committed in the database.
  Staged
    File has been marked in current version to go into next commit snapshot.

Git project has three main areas:
  Working Directory
    One version of project pulled from database.
  Staging area (index)
    File that stores information about what will go into next commit.
  Repository (.git directory)
    Stores metadata and object database of project.

Git use case:
  1. You modify files in your working tree.
  2. You stage the files, adding snapshots of them to your staging area.
  3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.


Initializing a Repository in Directory:
  Go to directory in which you want to create new repository.
  Type command: git init
    -new subdirectory is created: .git (which has necessary repository files)

Files in repository can have two states:
  -tracked: files that were in last snapshot and can be:
    -unmodified: files that are not changed
    -modified: edited files
    -staged
  -untracked: all other files

If there are file that we don't want to add to repository and not even list (for example some log file or configuration file) we can create new file called: ".gitignore" in which
are written names of such files. Instead of whole file name, regular expression can be used (for example *.log to exclude all file with suffix .log)
  Tips:
    -Blank lines or lines starting with # are ignored.
    -Standard glob patterns work.
    -You can start patterns with a forward slash (/) to avoid recursivity.
    -You can end patterns with a forward slash (/) to specify a directory.
    -You can negate a pattern by starting it with an exclamation point (!)

Git doesn't track file movement which means if user renames files that file will be new to git. But there is command for moving files.

In git anything that was never committed is likely never to be seen again.

If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You’ll have to fetch their work first and incorporate it into yours before you’ll be allowed to push.

Git can tag specific commits as important, for example releases of software 1.0, 2.0 etc.
  Two types of tag:
    -lightweight: similar to branch that doesn't change (just a pointer)
    -annotated: full objects, they have checksum, name email and data. They can even be signed by GNU.
  Push doesn't transfer tags.
    Pushing tags is the same as pushing branches.

Detached HEAD state happens when user is viewing file form previous tag.
  If he wants to commit new changes he needs to create new branch otherwise new commit won't belong to any branch.
    git checkout -b version2 v2.0.0

Branch in git is pointer that points to commit that is pointer to the snapshot and to previous commit.
  Branch is just u small file with commit ID that it belongs to (checksum of commit).
